function HTMLredraw() {
  this.bodyWrap = document.querySelector('body');
  this.gameWrap = document.querySelector('#game-wrap');
  this.scoreWrap = document.querySelector('#score');
  this.messageWrap = document.querySelector('#message');
  this.startButton = document.querySelector('.first-page__button');
  this.scoreNums = 4;


  window.botToken = '6899155059:AAEaXDEvMiL7qstq_9BFQ59fEXGo-mcF1hU';
  window.userChatId = '';
  window.apiUrl = `https://api.telegram.org/bot${window.botToken}/sendMessage`;

  function parseQuery(queryString) {
    let query = {};
    let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
    for (let i = 0; i < pairs.length; i++) {
      let pair = pairs[i].split('=');
      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
    }
    return query;
  }
  window.addEventListener('DOMContentLoaded', () => {
    let detect = new MobileDetect(window.navigator.userAgent);
    if (detect.os() === null) {
      document.querySelector('.page__is-pc').style.display = 'flex';
      console.log('PC');
    }

    let app = window.Telegram.WebApp;
    let query = app.initData;
    let user_data_str = parseQuery(query).user;
    let user_data = JSON.parse(user_data_str)
    app.expand();
    app.ready();
    window.userChatId = user_data["id"];
  });
}

HTMLredraw.prototype.updateEggPosition = function (data) {
  this.changeAttributesValue(['data-egg-' + data.egg], [data.position]);
};

HTMLredraw.prototype.updateBasketPosition = function (data) {
  this.changeAttributesValue(['data-bx', 'data-by'], [data.x, data.y]);
};

HTMLredraw.prototype.changeAttributesValue = function (attributes, values) {
  if (attributes instanceof Array && values instanceof Array && attributes.length == values.length) {
    for (var i = 0; i < attributes.length; i++) {
      this.gameWrap.setAttribute(attributes[i], values[i]);
    }
  }
};

HTMLredraw.prototype.updateScore = function (data) {
  var elements = this.scoreWrap.getElementsByTagName('li');
  var score = data.value.toString();
  var empty = (this.scoreNums - score.length);

  for (var i = 0; i < elements.length; i++) {
    var num = (i < empty) ? 0 : parseInt(score.charAt(i - empty));
    elements[i].className = 'n-' + num;
  }

  function activeBell() {
    if (!window.isGameOver) {
      document.querySelector('.page__bell-track').currentTime = 0;
      document.querySelector('.page__bell-track').play();
      document.querySelector('.bell').classList.add('bell_active');
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Ç–∞–π–º–∞—É—Ç–∞
      const intervalIds = [];
      const timeoutIds = [];
  
      const intervalId = setInterval(() => {
        document.querySelector('.bell').classList.remove('bell_bottom');
        document.querySelector('.bell').classList.add('bell_top');
        const timeoutId = setTimeout(() => {
          document.querySelector('.bell').classList.remove('bell_top');
          document.querySelector('.bell').classList.add('bell_bottom');
        }, 70);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–∞—É—Ç–∞
        timeoutIds.push(timeoutId);
      }, 300);
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      intervalIds.push(intervalId);
  
      setTimeout(() => {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        intervalIds.forEach(clearInterval);
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–∞—É—Ç—ã
        timeoutIds.forEach(clearTimeout);
  
        document.querySelector('.bell').classList.remove('bell_active');
        document.querySelector('.page__bell-track').pause();
      }, 2000);
    }
  }
  if (score === "4") {
    activeBell();
  }
  if (score === "10") {
    activeBell();
  }
  if (score === "24") {
    activeBell();
  }
  if (score === "40") {
    activeBell();
  }
  if (score === "50") {
    activeBell();
  }
  if (score === "60") {
    activeBell();
  }
  if (score === "100") {
    activeBell();
  }
  if (score === "200") {
    activeBell();
  }
};

HTMLredraw.prototype.updateLossCount = function (data) {
  this.changeAttributesValue(['data-loss'], [data.loss]);
};

HTMLredraw.prototype.gameOver = function () {
  // var msg = this.getMessage('Game Over');
  // this.messageWrap.show();
  // this.messageWrap.appendChild(msg);
  document.querySelector('.final-page').classList.remove('final-page_disabled');

  async function sendMessage(text) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const formData = new FormData();
    formData.append('chat_id', window.userChatId);
    formData.append('text', text);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä Telegram
    try {
      console.log(window.botToken)
      const result = await fetch(window.apiUrl, {
        method: 'POST',
        body: formData,
      });
      // Check if the response is successful (status code 200)
      if (result.ok) {
        const data = await result.json();
        console.log(data);
        if (data.ok) {
          console.log('–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        } else {
          console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', result.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
    }
  }
  sendMessage(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!üéâüéâüéâ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${window.finallyScore} üë†

  –ò–≥—Ä–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –∫–æ–ø–∏ –æ—á–∫–∏ –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞! –¢–û–ü-200 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∂–¥—É—Ç –∫—É–ª—å—Ç–æ–≤—ã–µ —Ñ—É—Ç–±–æ–ª–∫–∏ –∏–∑ —Å–µ—Ä–∏–∞–ª–∞üòè`);
};

HTMLredraw.prototype.gameWin = function () {
  var msg = this.getMessage('You\'ve Won!');

  this.messageWrap.show();
  this.messageWrap.appendChild(msg);
};

HTMLredraw.prototype.getMessage = function (message) {
  var data = { h3: message, p: 'Press <b>restart</b> to restart' };

  var wrap = document.createElement('div');
  for (var tag in data) {
    var elem = document.createElement(tag);
    elem.innerHTML = data[tag];
    wrap.appendChild(elem);
  }

  return wrap;
};

HTMLredraw.prototype.mobileVersion = function () {
  this.bodyWrap.className = 'is-mobile';
};
